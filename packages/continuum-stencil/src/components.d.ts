/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
export namespace Components {
  interface CtAlert {
    /**
     * Makes the alert closable
     */
    closable: boolean;
    /**
     * The type of alert changes the color and icon of the alert
     */
    type: 'info' | 'warning' | 'error';
  }
  interface CtAvatar {
    /**
     * Enables indicator in the icon
     */
    active: boolean;
    /**
     * Background of the indicator supports any valid css background value
     */
    indicatorBg: string;
    /**
     * URL of the Avatar image
     * @required
     */
    src: string;
  }
  interface CtBadge {
    /**
     * Makes the badge closable
     */
    closable: boolean;
    /**
     * Disables the badge
     */
    disabled: boolean;
  }
  interface CtButton {
    /**
     * Disables the button
     */
    disabled: boolean;
  }
  interface CtCheck {
    /**
     * Checked state of the checkbox
     */
    checked: boolean;
    /**
     * Disables the checkbox
     */
    disabled: boolean;
  }
  interface CtInput {
    /**
     * Disables the input field
     */
    disabled: boolean;
    /**
     * The label of the input field If no label is provided, the placeholder will be used as label
     */
    label: string;
    /**
     * The placeholder of the input field
     */
    placeholder: string;
    /**
     * The type of the input field
     */
    type: string;
    /**
     * The value of the input field
     */
    value: string;
  }
  interface CtProgress {
    /**
     * The maximum value of the progress bar
     */
    max: number;
    /**
     * The value of the progress bar
     */
    value: number;
  }
  interface CtSlider {
    /**
     * Disables the slider
     */
    disabled: boolean;
    /**
     * The value of the slider The value is a number between 0 and 100
     */
    value: number;
  }
  interface CtToggle {
    /**
     * Disables the toggle
     */
    disabled: boolean;
    /**
     * Toggles the toggle state
     */
    toggle: () => Promise<void>;
    /**
     * The value of the toggle
     */
    toggled: boolean;
  }
}
declare global {
  interface HTMLCtAlertElement extends Components.CtAlert, HTMLStencilElement {}
  var HTMLCtAlertElement: {
    prototype: HTMLCtAlertElement;
    new (): HTMLCtAlertElement;
  };
  interface HTMLCtAvatarElement extends Components.CtAvatar, HTMLStencilElement {}
  var HTMLCtAvatarElement: {
    prototype: HTMLCtAvatarElement;
    new (): HTMLCtAvatarElement;
  };
  interface HTMLCtBadgeElement extends Components.CtBadge, HTMLStencilElement {}
  var HTMLCtBadgeElement: {
    prototype: HTMLCtBadgeElement;
    new (): HTMLCtBadgeElement;
  };
  interface HTMLCtButtonElement extends Components.CtButton, HTMLStencilElement {}
  var HTMLCtButtonElement: {
    prototype: HTMLCtButtonElement;
    new (): HTMLCtButtonElement;
  };
  interface HTMLCtCheckElement extends Components.CtCheck, HTMLStencilElement {}
  var HTMLCtCheckElement: {
    prototype: HTMLCtCheckElement;
    new (): HTMLCtCheckElement;
  };
  interface HTMLCtInputElement extends Components.CtInput, HTMLStencilElement {}
  var HTMLCtInputElement: {
    prototype: HTMLCtInputElement;
    new (): HTMLCtInputElement;
  };
  interface HTMLCtProgressElement extends Components.CtProgress, HTMLStencilElement {}
  var HTMLCtProgressElement: {
    prototype: HTMLCtProgressElement;
    new (): HTMLCtProgressElement;
  };
  interface HTMLCtSliderElement extends Components.CtSlider, HTMLStencilElement {}
  var HTMLCtSliderElement: {
    prototype: HTMLCtSliderElement;
    new (): HTMLCtSliderElement;
  };
  interface HTMLCtToggleElement extends Components.CtToggle, HTMLStencilElement {}
  var HTMLCtToggleElement: {
    prototype: HTMLCtToggleElement;
    new (): HTMLCtToggleElement;
  };
  interface HTMLElementTagNameMap {
    'ct-alert': HTMLCtAlertElement;
    'ct-avatar': HTMLCtAvatarElement;
    'ct-badge': HTMLCtBadgeElement;
    'ct-button': HTMLCtButtonElement;
    'ct-check': HTMLCtCheckElement;
    'ct-input': HTMLCtInputElement;
    'ct-progress': HTMLCtProgressElement;
    'ct-slider': HTMLCtSliderElement;
    'ct-toggle': HTMLCtToggleElement;
  }
}
declare namespace LocalJSX {
  interface CtAlert {
    /**
     * Makes the alert closable
     */
    closable?: boolean;
    /**
     * The type of alert changes the color and icon of the alert
     */
    type?: 'info' | 'warning' | 'error';
  }
  interface CtAvatar {
    /**
     * Enables indicator in the icon
     */
    active?: boolean;
    /**
     * Background of the indicator supports any valid css background value
     */
    indicatorBg?: string;
    /**
     * URL of the Avatar image
     * @required
     */
    src: string;
  }
  interface CtBadge {
    /**
     * Makes the badge closable
     */
    closable?: boolean;
    /**
     * Disables the badge
     */
    disabled?: boolean;
  }
  interface CtButton {
    /**
     * Disables the button
     */
    disabled?: boolean;
  }
  interface CtCheck {
    /**
     * Checked state of the checkbox
     */
    checked?: boolean;
    /**
     * Disables the checkbox
     */
    disabled?: boolean;
  }
  interface CtInput {
    /**
     * Disables the input field
     */
    disabled?: boolean;
    /**
     * The label of the input field If no label is provided, the placeholder will be used as label
     */
    label: string;
    /**
     * The placeholder of the input field
     */
    placeholder?: string;
    /**
     * The type of the input field
     */
    type?: string;
    /**
     * The value of the input field
     */
    value?: string;
  }
  interface CtProgress {
    /**
     * The maximum value of the progress bar
     */
    max?: number;
    /**
     * The value of the progress bar
     */
    value: number;
  }
  interface CtSlider {
    /**
     * Disables the slider
     */
    disabled?: boolean;
    /**
     * The value of the slider The value is a number between 0 and 100
     */
    value?: number;
  }
  interface CtToggle {
    /**
     * Disables the toggle
     */
    disabled?: boolean;
    /**
     * The value of the toggle
     */
    toggled?: boolean;
  }
  interface IntrinsicElements {
    'ct-alert': CtAlert;
    'ct-avatar': CtAvatar;
    'ct-badge': CtBadge;
    'ct-button': CtButton;
    'ct-check': CtCheck;
    'ct-input': CtInput;
    'ct-progress': CtProgress;
    'ct-slider': CtSlider;
    'ct-toggle': CtToggle;
  }
}
export { LocalJSX as JSX };
declare module '@stencil/core' {
  export namespace JSX {
    interface IntrinsicElements {
      'ct-alert': LocalJSX.CtAlert & JSXBase.HTMLAttributes<HTMLCtAlertElement>;
      'ct-avatar': LocalJSX.CtAvatar & JSXBase.HTMLAttributes<HTMLCtAvatarElement>;
      'ct-badge': LocalJSX.CtBadge & JSXBase.HTMLAttributes<HTMLCtBadgeElement>;
      'ct-button': LocalJSX.CtButton & JSXBase.HTMLAttributes<HTMLCtButtonElement>;
      'ct-check': LocalJSX.CtCheck & JSXBase.HTMLAttributes<HTMLCtCheckElement>;
      'ct-input': LocalJSX.CtInput & JSXBase.HTMLAttributes<HTMLCtInputElement>;
      'ct-progress': LocalJSX.CtProgress & JSXBase.HTMLAttributes<HTMLCtProgressElement>;
      'ct-slider': LocalJSX.CtSlider & JSXBase.HTMLAttributes<HTMLCtSliderElement>;
      'ct-toggle': LocalJSX.CtToggle & JSXBase.HTMLAttributes<HTMLCtToggleElement>;
    }
  }
}
